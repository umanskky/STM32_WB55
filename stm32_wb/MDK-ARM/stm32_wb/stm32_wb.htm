<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [stm32_wb\stm32_wb.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image stm32_wb\stm32_wb.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Wed Oct  9 19:54:04 2024
<BR><P>
<H3>Maximum Stack Usage =        648 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
APPE_SysUserEvtRx &rArr; APP_BLE_Init &rArr; SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; SVCCTL_InitCustomSvc &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b3]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3d]">AES1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3e]">AES2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[59]">APPE_SysStatusNot</a> from app_entry.o(.text.APPE_SysStatusNot) referenced 2 times from app_entry.o(.text.MX_APPE_Init)
 <LI><a href="#[5a]">APPE_SysUserEvtRx</a> from app_entry.o(.text.APPE_SysUserEvtRx) referenced 2 times from app_entry.o(.text.MX_APPE_Init)
 <LI><a href="#[50]">Adv_Cancel</a> from app_ble.o(.text.Adv_Cancel) referenced 2 times from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[4d]">BLE_StatusNot</a> from app_ble.o(.text.BLE_StatusNot) referenced 2 times from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[4e]">BLE_UserEvtRx</a> from app_ble.o(.text.BLE_UserEvtRx) referenced 2 times from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32wbxx_it.o(.text.BusFault_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1f]">C2SEV_PWR_C2H_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[20]">COMP_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[34]">CRS_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5b]">Custom_STM_Event_Handler</a> from custom_stm.o(.text.Custom_STM_Event_Handler) referenced 2 times from custom_stm.o(.text.SVCCTL_InitCustomSvc)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from stm32wbxx_it.o(.text.DMA1_Channel1_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from stm32wbxx_it.o(.text.DMA1_Channel2_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[41]">DMA2_Channel1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[42]">DMA2_Channel2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[43]">DMA2_Channel3_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[44]">DMA2_Channel4_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[45]">DMA2_Channel5_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[46]">DMA2_Channel6_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[47]">DMA2_Channel7_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[48]">DMAMUX1_OVR_IRQHandler</a> from stm32wbxx_it.o(.text.DMAMUX1_OVR_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[51]">DbgTrace_TxCpltCallback</a> from dbg_trace.o(.text.DbgTrace_TxCpltCallback) referenced 2 times from dbg_trace.o(.text.DbgTrace_TxCpltCallback)
 <LI><a href="#[51]">DbgTrace_TxCpltCallback</a> from dbg_trace.o(.text.DbgTrace_TxCpltCallback) referenced 2 times from dbg_trace.o(.text.fputc)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32wbxx_it.o(.text.DebugMon_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[40]">FPU_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[52]">HAL_IPCC_RxCallback</a> from stm32wbxx_hal_ipcc.o(.text.HAL_IPCC_RxCallback) referenced 2 times from stm32wbxx_hal_ipcc.o(.text.HAL_IPCC_Init)
 <LI><a href="#[53]">HAL_IPCC_TxCallback</a> from stm32wbxx_hal_ipcc.o(.text.HAL_IPCC_TxCallback) referenced 2 times from stm32wbxx_hal_ipcc.o(.text.HAL_IPCC_Init)
 <LI><a href="#[38]">HSEM_IRQHandler</a> from stm32wbxx_it.o(.text.HSEM_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32wbxx_it.o(.text.HardFault_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[29]">I2C1_ER_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[28]">I2C1_EV_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2b]">I2C3_ER_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2a]">I2C3_EV_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[36]">IPCC_C1_RX_IRQHandler</a> from stm32wbxx_it.o(.text.IPCC_C1_RX_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[37]">IPCC_C1_TX_IRQHandler</a> from stm32wbxx_it.o(.text.IPCC_C1_TX_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3b]">LCD_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[39]">LPTIM1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3a]">LPTIM2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2f]">LPUART1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32wbxx_it.o(.text.MemManage_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32wbxx_it.o(.text.NMI_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[27]">PKA_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[35]">PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32wbxx_it.o(.text.PendSV_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3c]">QUADSPI_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[3f]">RNG_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from stm32wbxx_it.o(.text.RTC_WKUP_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[30]">SAI1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2c]">SPI1_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[2d]">SPI2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32wbxx_it.o(.text.SVC_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5c]">SendFreeBuf</a> from tl_mbox.o(.text.SendFreeBuf) referenced 2 times from tl_mbox.o(.text.TL_MM_EvtDone)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32wbxx_it.o(.text.SysTick_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_stm32wbxx.o(.text.SystemInit) referenced from startup_stm32wb55xx_cm4.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_LSECSS_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5e]">TL_BLE_Init</a> from tl_mbox.o(.text.TL_BLE_Init) referenced 2 times from hci_tl_if.o(.text.hci_register_io_bus)
 <LI><a href="#[5f]">TL_BLE_SendCmd</a> from tl_mbox.o(.text.TL_BLE_SendCmd) referenced 2 times from hci_tl_if.o(.text.hci_register_io_bus)
 <LI><a href="#[62]">TL_SYS_Init</a> from tl_mbox.o(.text.TL_SYS_Init) referenced 2 times from shci_tl_if.o(.text.shci_register_io_bus)
 <LI><a href="#[63]">TL_SYS_SendCmd</a> from tl_mbox.o(.text.TL_SYS_SendCmd) referenced 2 times from shci_tl_if.o(.text.shci_register_io_bus)
 <LI><a href="#[31]">TSC_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[60]">TlCmdEvtReceived</a> from shci_tl.o(.text.TlCmdEvtReceived) referenced 2 times from shci_tl.o(.text.shci_init)
 <LI><a href="#[5d]">TlEvtReceived</a> from hci_tl.o(.text.TlEvtReceived) referenced 2 times from hci_tl.o(.text.hci_init)
 <LI><a href="#[61]">TlUserEvtReceived</a> from shci_tl.o(.text.TlUserEvtReceived) referenced 2 times from shci_tl.o(.text.shci_init)
 <LI><a href="#[54]">UART_DMAAbortOnError</a> from stm32wbxx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32wbxx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[55]">UART_DMAError</a> from stm32wbxx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32wbxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[56]">UART_DMATransmitCplt</a> from stm32wbxx_hal_uart.o(.text.UART_DMATransmitCplt) referenced 2 times from stm32wbxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[57]">UART_DMATxHalfCplt</a> from stm32wbxx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced 2 times from stm32wbxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[2e]">USART1_IRQHandler</a> from stm32wbxx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1d]">USB_HP_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[1e]">USB_LP_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32wbxx_it.o(.text.UsageFault_Handler) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32wb55xx_cm4.o(.text) referenced from startup_stm32wb55xx_cm4.o(RESET)
 <LI><a href="#[4a]">__main</a> from __main.o(!!!main) referenced from startup_stm32wb55xx_cm4.o(.text)
 <LI><a href="#[4c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[4b]">fputc</a> from dbg_trace.o(.text.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[4f]">hci_user_evt_proc</a> from hci_tl.o(.text.hci_user_evt_proc) referenced 2 times from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[58]">shci_user_evt_proc</a> from shci_tl.o(.text.shci_user_evt_proc) referenced 2 times from app_entry.o(.text.MX_APPE_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[66]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[18e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[18f]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[190]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[191]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[67]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[192]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[68]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[8d]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6a]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[6c]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[193]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[7d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[6e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[70]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[194]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[195]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[196]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[72]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[197]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[198]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[199]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[19a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[19b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[74]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[19c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[19d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[19e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[19f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1a0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1a2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[76]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1a3]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1a4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[82]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1a9]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[78]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[1aa]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1ab]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1ac]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1ad]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1ae]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1af]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[65]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1b0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1b1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[7e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_APPE_Init &rArr; APPD_Init &rArr; DbgTraceInit &rArr; DbgOutputInit &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1b2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[c1]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[81]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1b3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[83]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>AES1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>AES2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>C2SEV_PWR_C2H_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wb55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32wb55xx_cm4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b4]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_InitCustomSvc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Cancel
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[94]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[95]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[6b]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[88]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[6d]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[89]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[8a]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[8b]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[8e]"></a>putchar</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, putchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = putchar &rArr; fputc &rArr; DbgOutputTraces &rArr; HW_UART_Transmit_DMA &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[8f]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = puts &rArr; fputc &rArr; DbgOutputTraces &rArr; HW_UART_Transmit_DMA &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Add
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[90]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1b5]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[1b8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[87]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9c]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[86]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[77]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[79]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1c0]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[a6]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[9b]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9f]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[9e]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[97]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a0]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[a4]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[a2]"></a>freopen</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[ab]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[a5]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[1c3]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a3]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[a9]"></a>_sys_open</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_open &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[ae]"></a>_sys_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[bf]"></a>_sys_write</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1c4]"></a>_sys_read</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[be]"></a>_sys_seek</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1c5]"></a>_sys_ensure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1c6]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1c7]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a8]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[1c8]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[b6]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[71]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[ac]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[aa]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1cc]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[bd]"></a>_writebuf</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[ad]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[c0]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[80]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c2]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[b0]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[18a]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[c3]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[b8]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1cd]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[ba]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1cf]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[b1]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[1d0]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[c6]"></a>APPD_EnableCPU2</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, app_debug.o(.text.APPD_EnableCPU2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = APPD_EnableCPU2 &rArr; SHCI_C2_DEBUG_Init &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_DEBUG_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[c9]"></a>APPD_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_debug.o(.text.APPD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = APPD_Init &rArr; DbgTraceInit &rArr; DbgOutputInit &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgTraceInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGStopMode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGSleepMode
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[cf]"></a>APP_BLE_Init</STRONG> (Thumb, 860 bytes, Stack size 120 bytes, app_ble.o(.text.APP_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = APP_BLE_Init &rArr; SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; SVCCTL_InitCustomSvc &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_APP_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_BLE_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP_Read
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[14f]"></a>BAS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.BAS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[150]"></a>BLS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.BLS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[15e]"></a>BVOPUS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.BVOPUS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[151]"></a>CRS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.CRS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[e9]"></a>CircularQueue_Add</STRONG> (Thumb, 568 bytes, Stack size 48 bytes, stm_queue.o(.text.CircularQueue_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CircularQueue_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[f0]"></a>CircularQueue_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm_queue.o(.text.CircularQueue_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CircularQueue_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgTraceInit
</UL>

<P><STRONG><a name="[f1]"></a>CircularQueue_Remove</STRONG> (Thumb, 256 bytes, Stack size 20 bytes, stm_queue.o(.text.CircularQueue_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CircularQueue_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgTrace_TxCpltCallback
</UL>

<P><STRONG><a name="[f2]"></a>CircularQueue_Sense</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm_queue.o(.text.CircularQueue_Sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CircularQueue_Sense
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgTrace_TxCpltCallback
</UL>

<P><STRONG><a name="[e1]"></a>Custom_APP_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, custom_app.o(.text.Custom_APP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[145]"></a>Custom_APP_Notification</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, custom_app.o(.text.Custom_APP_Notification))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[152]"></a>DIS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.DIS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.DMAMUX1_OVR_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>DbgOutputInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_debug.o(.text.DbgOutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DbgOutputInit &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgTraceInit
</UL>

<P><STRONG><a name="[ee]"></a>DbgOutputTraces</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_debug.o(.text.DbgOutputTraces))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DbgOutputTraces &rArr; HW_UART_Transmit_DMA &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgTrace_TxCpltCallback
</UL>

<P><STRONG><a name="[cc]"></a>DbgTraceInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dbg_trace.o(.text.DbgTraceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = DbgTraceInit &rArr; DbgOutputInit &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgOutputInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_Init
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[153]"></a>EDS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.EDS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[d4]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal.o(.text.HAL_DBGMCU_EnableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal.o(.text.HAL_DBGMCU_EnableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_Init
</UL>

<P><STRONG><a name="[112]"></a>HAL_DMA_Abort</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32wbxx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32wbxx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32wbxx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>HAL_DMA_Init</STRONG> (Thumb, 298 bytes, Stack size 36 bytes, stm32wbxx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[11f]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32wbxx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[105]"></a>HAL_GPIO_Init</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, stm32wbxx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[109]"></a>HAL_GetTickPrio</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_hal.o(.text.HAL_GetTickPrio))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[f4]"></a>HAL_HSEM_FreeCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_hsem.o(.text.HAL_HSEM_FreeCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_HSEM_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32wbxx_hal_hsem.o(.text.HAL_HSEM_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_FreeCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSEM_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>HAL_IPCC_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32wbxx_hal_ipcc.o(.text.HAL_IPCC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_IPCC_Init &rArr; HAL_IPCC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>HAL_IPCC_MspInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32wbxx_hal_msp.o(.text.HAL_IPCC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_IPCC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_Init
</UL>

<P><STRONG><a name="[52]"></a>HAL_IPCC_RxCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_ipcc.o(.text.HAL_IPCC_RxCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_ipcc.o(.text.HAL_IPCC_Init)
</UL>
<P><STRONG><a name="[53]"></a>HAL_IPCC_TxCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_ipcc.o(.text.HAL_IPCC_TxCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_ipcc.o(.text.HAL_IPCC_Init)
</UL>
<P><STRONG><a name="[161]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f9]"></a>HAL_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32wbxx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>HAL_InitTick</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32wbxx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_MspInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32wbxx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(.text.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
</UL>

<P><STRONG><a name="[133]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
</UL>

<P><STRONG><a name="[f8]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_MspInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(.text.HAL_NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32wbxx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_MspInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[103]"></a>HAL_PCDEx_ActivateLPM</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32wbxx_hal_pcd_ex.o(.text.HAL_PCDEx_ActivateLPM))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[ff]"></a>HAL_PCD_Init</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, stm32wbxx_hal_pcd.o(.text.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_ActivateLPM
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 166 bytes, Stack size 112 bytes, stm32wbxx_hal_msp.o(.text.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[142]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[106]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbxx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Config
</UL>

<P><STRONG><a name="[163]"></a>HAL_RCCEx_EnableMSIPLLMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc_ex.o(.text.HAL_RCCEx_EnableMSIPLLMode))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[104]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1020 bytes, Stack size 32 bytes, stm32wbxx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 726 bytes, Stack size 32 bytes, stm32wbxx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTickPrio
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fd]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[174]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[173]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[175]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, stm32wbxx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[10a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1826 bytes, Stack size 24 bytes, stm32wbxx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10c]"></a>HAL_RTCEx_SetWakeUpTimer_IT</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, stm32wbxx_hal_rtc_ex.o(.text.HAL_RTCEx_SetWakeUpTimer_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>HAL_RTC_Init</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, stm32wbxx_hal_rtc.o(.text.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 114 bytes, Stack size 96 bytes, stm32wbxx_hal_msp.o(.text.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[fe]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32wbxx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[13f]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32wbxx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[113]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_uart_ex.o(.text.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32wbxx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[13d]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32wbxx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[114]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_uart_ex.o(.text.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[10f]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1600 bytes, Stack size 16 bytes, stm32wbxx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32wbxx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[119]"></a>HAL_UART_MspInit</STRONG> (Thumb, 258 bytes, Stack size 128 bytes, stm32wbxx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11e]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, stm32wbxx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[111]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hw_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[172]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[154]"></a>HIDS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.HIDS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[155]"></a>HRS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.HRS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[38]"></a>HSEM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.HSEM_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[156]"></a>HTS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.HTS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[129]"></a>HW_IPCC_BLE_AclDataAckNot</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tl_mbox.o(.text.HW_IPCC_BLE_AclDataAckNot))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
</UL>

<P><STRONG><a name="[165]"></a>HW_IPCC_BLE_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_ipcc.o(.text.HW_IPCC_BLE_Init))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_Init
</UL>

<P><STRONG><a name="[120]"></a>HW_IPCC_BLE_RxEvtNot</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tl_mbox.o(.text.HW_IPCC_BLE_RxEvtNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_IPCC_BLE_RxEvtNot
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>

<P><STRONG><a name="[166]"></a>HW_IPCC_BLE_SendCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_ipcc.o(.text.HW_IPCC_BLE_SendCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_SendCmd
</UL>

<P><STRONG><a name="[167]"></a>HW_IPCC_Enable</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, hw_ipcc.o(.text.HW_IPCC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HW_IPCC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Enable
</UL>

<P><STRONG><a name="[123]"></a>HW_IPCC_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hw_ipcc.o(.text.HW_IPCC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_IPCC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Init
</UL>

<P><STRONG><a name="[169]"></a>HW_IPCC_MM_SendFreeBuf</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_MM_SendFreeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
</UL>

<P><STRONG><a name="[124]"></a>HW_IPCC_Rx_Handler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_Rx_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_IPCC_Rx_Handler &rArr; HW_IPCC_TRACES_EvtNot
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtNot
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_RxEvtNot
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCC_C1_RX_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>HW_IPCC_SYS_CmdEvtNot</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tl_mbox.o(.text.HW_IPCC_SYS_CmdEvtNot))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
</UL>

<P><STRONG><a name="[125]"></a>HW_IPCC_SYS_EvtNot</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tl_mbox.o(.text.HW_IPCC_SYS_EvtNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_IPCC_SYS_EvtNot
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>

<P><STRONG><a name="[16a]"></a>HW_IPCC_SYS_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_ipcc.o(.text.HW_IPCC_SYS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_Init
</UL>

<P><STRONG><a name="[16b]"></a>HW_IPCC_SYS_SendCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hw_ipcc.o(.text.HW_IPCC_SYS_SendCmd))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_SendCmd
</UL>

<P><STRONG><a name="[126]"></a>HW_IPCC_TRACES_EvtNot</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tl_mbox.o(.text.HW_IPCC_TRACES_EvtNot))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_IPCC_TRACES_EvtNot
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_EvtReceived
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>

<P><STRONG><a name="[16c]"></a>HW_IPCC_TRACES_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_ipcc.o(.text.HW_IPCC_TRACES_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_Init
</UL>

<P><STRONG><a name="[128]"></a>HW_IPCC_Tx_Handler</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, hw_ipcc.o(.text.HW_IPCC_Tx_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_IPCC_Tx_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_CmdEvtNot
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_AclDataAckNot
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPCC_C1_TX_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>HW_TS_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, hw_timerserver.o(.text.HW_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_TS_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[132]"></a>HW_TS_RTC_Int_AppNot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_timerserver.o(.text.HW_TS_RTC_Int_AppNot))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[12e]"></a>HW_TS_RTC_Wakeup_Handler</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, hw_timerserver.o(.text.HW_TS_RTC_Wakeup_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HW_TS_RTC_Wakeup_Handler &rArr; HW_TS_Start &rArr; HW_TS_Stop &rArr; RescheduleTimerList
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Int_AppNot
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>HW_TS_Start</STRONG> (Thumb, 546 bytes, Stack size 32 bytes, hw_timerserver.o(.text.HW_TS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HW_TS_Start &rArr; HW_TS_Stop &rArr; RescheduleTimerList
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[130]"></a>HW_TS_Stop</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, hw_timerserver.o(.text.HW_TS_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_TS_Stop &rArr; RescheduleTimerList
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RescheduleTimerList
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[ef]"></a>HW_UART_Transmit_DMA</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hw_uart.o(.text.HW_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HW_UART_Transmit_DMA &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgOutputTraces
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[157]"></a>IAS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.IAS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[36]"></a>IPCC_C1_RX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.IPCC_C1_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IPCC_C1_RX_IRQHandler &rArr; HW_IPCC_Rx_Handler &rArr; HW_IPCC_TRACES_EvtNot
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Rx_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IPCC_C1_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.IPCC_C1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IPCC_C1_TX_IRQHandler &rArr; HW_IPCC_Tx_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Tx_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[158]"></a>LLS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.LLS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[164]"></a>LST_init_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm_list.o(.text.LST_init_head))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_TRACES_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_SYS_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_BLE_Init
</UL>

<P><STRONG><a name="[181]"></a>LST_insert_head</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm_list.o(.text.LST_insert_head))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
</UL>

<P><STRONG><a name="[160]"></a>LST_insert_tail</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm_list.o(.text.LST_insert_tail))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFreeBuf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlUserEvtReceived
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlEvtReceived
</UL>

<P><STRONG><a name="[121]"></a>LST_is_empty</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm_list.o(.text.LST_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtNot
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_RxEvtNot
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFreeBuf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[122]"></a>LST_remove_head</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm_list.o(.text.LST_remove_head))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_EvtNot
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_RxEvtNot
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFreeBuf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[15f]"></a>MESH_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.MESH_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[15a]"></a>MOTENV_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.MOTENV_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[134]"></a>MX_APPE_Config</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, app_entry.o(.text.MX_APPE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_APPE_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP_Read
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>MX_APPE_Init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, app_entry.o(.text.MX_APPE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = MX_APPE_Init &rArr; APPD_Init &rArr; DbgTraceInit &rArr; DbgOutputInit &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Enable
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>MX_APPE_Process</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(.text.MX_APPE_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_APPE_Process &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, main.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgOutputInit
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[15d]"></a>OTAS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.OTAS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[d6]"></a>OTP_Read</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, otp.o(.text.OTP_Read))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Config
</UL>

<P><STRONG><a name="[140]"></a>Osal_MemCpy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, osal.o(.text.Osal_MemCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Osal_MemCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
</UL>

<P><STRONG><a name="[141]"></a>Osal_MemSet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, osal.o(.text.Osal_MemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Osal_MemSet &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_resp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
</UL>

<P><STRONG><a name="[15b]"></a>P2PS_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.P2PS_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.RTC_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RTC_WKUP_IRQHandler &rArr; HW_TS_RTC_Wakeup_Handler &rArr; HW_TS_Start &rArr; HW_TS_Stop &rArr; RescheduleTimerList
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>SHCI_C2_BLE_Init</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, shci.o(.text.SHCI_C2_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SHCI_C2_BLE_Init &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[ce]"></a>SHCI_C2_Config</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, shci.o(.text.SHCI_C2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SHCI_C2_Config &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[c8]"></a>SHCI_C2_DEBUG_Init</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, shci.o(.text.SHCI_C2_DEBUG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SHCI_C2_DEBUG_Init &rArr; shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_EnableCPU2
</UL>

<P><STRONG><a name="[cd]"></a>SHCI_GetWirelessFwInfo</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, shci.o(.text.SHCI_GetWirelessFwInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHCI_GetWirelessFwInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[144]"></a>SVCCTL_App_Notification</STRONG> (Thumb, 632 bytes, Stack size 32 bytes, app_ble.o(.text.SVCCTL_App_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = SVCCTL_App_Notification &rArr; Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_resp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_APP_Notification
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_UserEvtRx
</UL>

<P><STRONG><a name="[df]"></a>SVCCTL_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, svc_ctl.o(.text.SVCCTL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; SVCCTL_InitCustomSvc &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[14b]"></a>SVCCTL_InitCustomSvc</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, custom_stm.o(.text.SVCCTL_InitCustomSvc))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = SVCCTL_InitCustomSvc &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_RegisterSvcHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[14c]"></a>SVCCTL_RegisterSvcHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, svc_ctl.o(.text.SVCCTL_RegisterSvcHandler))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_InitCustomSvc
</UL>

<P><STRONG><a name="[14a]"></a>SVCCTL_SvcInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, svc_ctl.o(.text.SVCCTL_SvcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = SVCCTL_SvcInit &rArr; SVCCTL_InitCustomSvc &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_InitCustomSvc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BVOPUS_STM_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MESH_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTAS_STM_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZDD_STM_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2PS_STM_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTENV_STM_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPS_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLS_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAS_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRS_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIDS_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDS_STM_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIS_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRS_STM_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLS_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
</UL>

<P><STRONG><a name="[e8]"></a>SVCCTL_UserEvtRx</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, svc_ctl.o(.text.SVCCTL_UserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = SVCCTL_UserEvtRx &rArr; SVCCTL_App_Notification &rArr; Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_UserEvtRx
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[162]"></a>SystemClock_Config</STRONG> (Thumb, 196 bytes, Stack size 128 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableMSIPLLMode
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, system_stm32wbxx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>TL_BLE_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tl_mbox.o(.text.TL_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TL_BLE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl_if.o(.text.hci_register_io_bus)
</UL>
<P><STRONG><a name="[5f]"></a>TL_BLE_SendCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tl_mbox.o(.text.TL_BLE_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_BLE_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_BLE_SendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl_if.o(.text.hci_register_io_bus)
</UL>
<P><STRONG><a name="[13a]"></a>TL_Enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tl_mbox.o(.text.TL_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TL_Enable &rArr; HW_IPCC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[137]"></a>TL_Init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tl_mbox.o(.text.TL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TL_Init &rArr; HW_IPCC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[168]"></a>TL_MM_EvtDone</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tl_mbox.o(.text.TL_MM_EvtDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TL_MM_EvtDone &rArr; HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_MM_SendFreeBuf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
</UL>

<P><STRONG><a name="[139]"></a>TL_MM_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tl_mbox.o(.text.TL_MM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TL_MM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[62]"></a>TL_SYS_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tl_mbox.o(.text.TL_SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TL_SYS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl_if.o(.text.shci_register_io_bus)
</UL>
<P><STRONG><a name="[63]"></a>TL_SYS_SendCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tl_mbox.o(.text.TL_SYS_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_SYS_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_SYS_SendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl_if.o(.text.shci_register_io_bus)
</UL>
<P><STRONG><a name="[127]"></a>TL_TRACES_EvtReceived</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tl_mbox.o(.text.TL_TRACES_EvtReceived))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_EvtNot
</UL>

<P><STRONG><a name="[c7]"></a>TL_TRACES_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tl_mbox.o(.text.TL_TRACES_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TL_TRACES_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IPCC_TRACES_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_EnableCPU2
</UL>

<P><STRONG><a name="[159]"></a>TPS_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.TPS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[11a]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, stm32wbxx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11c]"></a>UART_CheckIdleState</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, stm32wbxx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11b]"></a>UART_SetConfig</STRONG> (Thumb, 556 bytes, Stack size 16 bytes, stm32wbxx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[171]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 714 bytes, Stack size 24 bytes, stm32wbxx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[2e]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>USB_DevInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(.text.USB_DevInit))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[101]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wbxx_ll_usb.o(.text.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[136]"></a>UTIL_LPM_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[d0]"></a>UTIL_LPM_SetOffMode</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_SetOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPE_SysUserEvtRx
</UL>

<P><STRONG><a name="[177]"></a>UTIL_SEQ_EvtIdle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(.text.UTIL_SEQ_EvtIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>

<P><STRONG><a name="[179]"></a>UTIL_SEQ_Idle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(.text.UTIL_SEQ_Idle))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[e6]"></a>UTIL_SEQ_PauseTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PauseTask))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_StatusNot
</UL>

<P><STRONG><a name="[17a]"></a>UTIL_SEQ_PostIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PostIdle))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[178]"></a>UTIL_SEQ_PreIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PreIdle))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[d2]"></a>UTIL_SEQ_RegTask</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_RegTask))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[e7]"></a>UTIL_SEQ_ResumeTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_ResumeTask))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_StatusNot
</UL>

<P><STRONG><a name="[13c]"></a>UTIL_SEQ_Run</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, stm32_seq.o(.text.UTIL_SEQ_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PostIdle
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PreIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>UTIL_SEQ_SetEvt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_SetEvt))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_release
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_release
</UL>

<P><STRONG><a name="[180]"></a>UTIL_SEQ_SetTask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_SetTask))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_notify_asynch_evt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_notify_asynch_evt
</UL>

<P><STRONG><a name="[17b]"></a>UTIL_SEQ_WaitEvt</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32_seq.o(.text.UTIL_SEQ_WaitEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_wait
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_wait
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbxx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wb55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[15c]"></a>ZDD_STM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, svc_ctl.o(.text.ZDD_STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_SvcInit
</UL>

<P><STRONG><a name="[da]"></a>aci_gap_init</STRONG> (Thumb, 140 bytes, Stack size 320 bytes, ble_gap_aci.o(.text.aci_gap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = aci_gap_init &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[149]"></a>aci_gap_numeric_comparison_value_confirm_yesno</STRONG> (Thumb, 80 bytes, Stack size 296 bytes, ble_gap_aci.o(.text.aci_gap_numeric_comparison_value_confirm_yesno))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = aci_gap_numeric_comparison_value_confirm_yesno &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[148]"></a>aci_gap_pass_key_resp</STRONG> (Thumb, 80 bytes, Stack size 296 bytes, ble_gap_aci.o(.text.aci_gap_pass_key_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = aci_gap_pass_key_resp &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[de]"></a>aci_gap_set_authentication_requirement</STRONG> (Thumb, 120 bytes, Stack size 304 bytes, ble_gap_aci.o(.text.aci_gap_set_authentication_requirement))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = aci_gap_set_authentication_requirement &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[e4]"></a>aci_gap_set_discoverable</STRONG> (Thumb, 158 bytes, Stack size 320 bytes, ble_gap_aci.o(.text.aci_gap_set_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
</UL>

<P><STRONG><a name="[dd]"></a>aci_gap_set_io_capability</STRONG> (Thumb, 74 bytes, Stack size 288 bytes, ble_gap_aci.o(.text.aci_gap_set_io_capability))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = aci_gap_set_io_capability &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[e3]"></a>aci_gap_set_non_discoverable</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, ble_gap_aci.o(.text.aci_gap_set_non_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = aci_gap_set_non_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Cancel
</UL>

<P><STRONG><a name="[e5]"></a>aci_gap_update_adv_data</STRONG> (Thumb, 86 bytes, Stack size 296 bytes, ble_gap_aci.o(.text.aci_gap_update_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = aci_gap_update_adv_data &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Request
</UL>

<P><STRONG><a name="[14e]"></a>aci_gatt_add_char</STRONG> (Thumb, 208 bytes, Stack size 320 bytes, ble_gatt_aci.o(.text.aci_gatt_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_InitCustomSvc
</UL>

<P><STRONG><a name="[14d]"></a>aci_gatt_add_service</STRONG> (Thumb, 176 bytes, Stack size 320 bytes, ble_gatt_aci.o(.text.aci_gatt_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = aci_gatt_add_service &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_InitCustomSvc
</UL>

<P><STRONG><a name="[d9]"></a>aci_gatt_init</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, ble_gatt_aci.o(.text.aci_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = aci_gatt_init &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[db]"></a>aci_gatt_update_char_value</STRONG> (Thumb, 104 bytes, Stack size 304 bytes, ble_gatt_aci.o(.text.aci_gatt_update_char_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = aci_gatt_update_char_value &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[e0]"></a>aci_hal_set_radio_activity_mask</STRONG> (Thumb, 76 bytes, Stack size 296 bytes, ble_hal_aci.o(.text.aci_hal_set_radio_activity_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = aci_hal_set_radio_activity_mask &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[d8]"></a>aci_hal_set_tx_power_level</STRONG> (Thumb, 80 bytes, Stack size 288 bytes, ble_hal_aci.o(.text.aci_hal_set_tx_power_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = aci_hal_set_tx_power_level &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[d7]"></a>aci_hal_write_config_data</STRONG> (Thumb, 92 bytes, Stack size 296 bytes, ble_hal_aci.o(.text.aci_hal_write_config_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = aci_hal_write_config_data &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[4b]"></a>fputc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dbg_trace.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; DbgOutputTraces &rArr; HW_UART_Transmit_DMA &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgOutputTraces
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[16e]"></a>hci_cmd_resp_release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ble.o(.text.hci_cmd_resp_release))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlEvtReceived
</UL>

<P><STRONG><a name="[17e]"></a>hci_cmd_resp_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ble.o(.text.hci_cmd_resp_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[d1]"></a>hci_init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, hci_tl.o(.text.hci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_register_io_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[dc]"></a>hci_le_set_default_phy</STRONG> (Thumb, 84 bytes, Stack size 288 bytes, ble_hci_le.o(.text.hci_le_set_default_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = hci_le_set_default_phy &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[16f]"></a>hci_notify_asynch_evt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_ble.o(.text.hci_notify_asynch_evt))
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_evt_proc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlEvtReceived
</UL>

<P><STRONG><a name="[17f]"></a>hci_register_io_bus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hci_tl_if.o(.text.hci_register_io_bus))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
</UL>

<P><STRONG><a name="[d5]"></a>hci_reset</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ble_hci_le.o(.text.hci_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_reset &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[17c]"></a>hci_send_req</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, hci_tl.o(.text.hci_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_wait
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_resp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
</UL>

<P><STRONG><a name="[4f]"></a>hci_user_evt_proc</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, hci_tl.o(.text.hci_user_evt_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hci_user_evt_proc &rArr; TL_MM_EvtDone &rArr; HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_notify_asynch_evt
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_head
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[7f]"></a>main</STRONG> (Thumb, 510 bytes, Stack size 88 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_APPE_Init &rArr; APPD_Init &rArr; DbgTraceInit &rArr; DbgOutputInit &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Process
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IPCC_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[16d]"></a>shci_cmd_resp_release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_entry.o(.text.shci_cmd_resp_release))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlCmdEvtReceived
</UL>

<P><STRONG><a name="[183]"></a>shci_cmd_resp_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_entry.o(.text.shci_cmd_resp_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_send
</UL>

<P><STRONG><a name="[138]"></a>shci_init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, shci_tl.o(.text.shci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shci_init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_register_io_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[170]"></a>shci_notify_asynch_evt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(.text.shci_notify_asynch_evt))
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_user_evt_proc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TlUserEvtReceived
</UL>

<P><STRONG><a name="[184]"></a>shci_register_io_bus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, shci_tl_if.o(.text.shci_register_io_bus))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_init
</UL>

<P><STRONG><a name="[143]"></a>shci_send</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, shci_tl.o(.text.shci_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = shci_send &rArr; shci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_wait
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_BLE_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_DEBUG_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_Config
</UL>

<P><STRONG><a name="[58]"></a>shci_user_evt_proc</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, shci_tl.o(.text.shci_user_evt_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shci_user_evt_proc &rArr; TL_MM_EvtDone &rArr; HW_IPCC_MM_SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_notify_asynch_evt
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_head
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TL_MM_EvtDone
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.MX_APPE_Init)
</UL>
<P><STRONG><a name="[98]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[186]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[185]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[187]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[188]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[99]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9a]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[189]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[9d]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[8c]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[75]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[1d2]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[147]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[18b]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[18d]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[18c]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[6f]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1d3]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1d4]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[69]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[59]"></a>APPE_SysStatusNot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(.text.APPE_SysStatusNot))
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.MX_APPE_Init)
</UL>
<P><STRONG><a name="[5a]"></a>APPE_SysUserEvtRx</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, app_entry.o(.text.APPE_SysUserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = APPE_SysUserEvtRx &rArr; APP_BLE_Init &rArr; SVCCTL_Init &rArr; SVCCTL_SvcInit &rArr; SVCCTL_InitCustomSvc &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_C2_Config
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPD_EnableCPU2
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHCI_GetWirelessFwInfo
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.MX_APPE_Init)
</UL>
<P><STRONG><a name="[12f]"></a>RescheduleTimerList</STRONG> (Thumb, 498 bytes, Stack size 32 bytes, hw_timerserver.o(.text.RescheduleTimerList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RescheduleTimerList
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_Stop
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TS_RTC_Wakeup_Handler
</UL>

<P><STRONG><a name="[4d]"></a>BLE_StatusNot</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_ble.o(.text.BLE_StatusNot))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_ResumeTask
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PauseTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[4e]"></a>BLE_UserEvtRx</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_ble.o(.text.BLE_UserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = BLE_UserEvtRx &rArr; SVCCTL_UserEvtRx &rArr; SVCCTL_App_Notification &rArr; Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_UserEvtRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[50]"></a>Adv_Cancel</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_ble.o(.text.Adv_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Adv_Cancel &rArr; aci_gap_set_non_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[e2]"></a>Adv_Request</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, app_ble.o(.text.Adv_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Adv_Request &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; hci_cmd_resp_wait &rArr; UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[5b]"></a>Custom_STM_Event_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custom_stm.o(.text.Custom_STM_Event_Handler))
<BR>[Address Reference Count : 1]<UL><LI> custom_stm.o(.text.SVCCTL_InitCustomSvc)
</UL>
<P><STRONG><a name="[10b]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, stm32wbxx_hal_rcc.o(.text.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[55]"></a>UART_DMAError</STRONG> (Thumb, 474 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[56]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[57]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[54]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wbxx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbxx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[5c]"></a>SendFreeBuf</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tl_mbox.o(.text.SendFreeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendFreeBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tl_mbox.o(.text.TL_MM_EvtDone)
</UL>
<P><STRONG><a name="[51]"></a>DbgTrace_TxCpltCallback</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, dbg_trace.o(.text.DbgTrace_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DbgTrace_TxCpltCallback &rArr; DbgOutputTraces &rArr; HW_UART_Transmit_DMA &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgOutputTraces
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Sense
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Remove
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dbg_trace.o(.text.fputc)
<LI> dbg_trace.o(.text.DbgTrace_TxCpltCallback)
</UL>
<P><STRONG><a name="[5d]"></a>TlEvtReceived</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hci_tl.o(.text.TlEvtReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TlEvtReceived
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_resp_release
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_notify_asynch_evt
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl.o(.text.hci_init)
</UL>
<P><STRONG><a name="[60]"></a>TlCmdEvtReceived</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, shci_tl.o(.text.TlCmdEvtReceived))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_cmd_resp_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl.o(.text.shci_init)
</UL>
<P><STRONG><a name="[61]"></a>TlUserEvtReceived</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, shci_tl.o(.text.TlUserEvtReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TlUserEvtReceived
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shci_notify_asynch_evt
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shci_tl.o(.text.shci_init)
</UL>
<P><STRONG><a name="[96]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[4c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
